datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  password         String?
  cart             String[] // Array of product IDs
  wishlist         String[] // Array of product IDs
  address          String?
  phone            String?
  orders           Order[]
  isAdmin          Boolean?  @default(false)
  stripeCustomerId String?
  resetToken       String?
  resetTokenExpiry DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String?
  price           Float
  colors          String[]
  images          String[]
  categories      String[]
  sizes           String[]
  inStock         Boolean     @default(true)
  isFeatured      Boolean     @default(false)
  orderItems      OrderItem[]
  stripeProductId String
  stripePriceId   String

  printfulSyncProductId Int? // Printful's product ID
  printfulSyncVariants  Json? // Array of variant mappings
  printfulTemplateId    Int? // Base Product template (t-shirt, hoodie, etc.)

  designPositionData String? // JSON string of design pos data
  isPrintOnDemand    Boolean @default(false) // Flag for print-on-demand products

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  userId      String      @db.ObjectId
  orderItems  OrderItem[]
  orderCode   String?     @unique
  totalAmount Float
  status      String // e.g., "pending", "shipped", "delivered"

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OrderItem {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String @db.ObjectId
  productId String @db.ObjectId
  quantity  Int    @default(1)
  color     String
  size      String
  price     Float

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}
